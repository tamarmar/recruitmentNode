name: Nightly Notification
on:
  schedule:
    - cron: "0 2 * * *"
  workflow_dispatch:

permissions:
  contents: read
  issues: write

jobs:
  test_and_create_issue:
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Install dependencies
        run: npm ci  # Uses package-lock.json for consistent dependencies

      - name: Debug Working Directory
        run: pwd && ls -R .github

      - name: Run tests
        id: run_tests
        continue-on-error: true
        run: |
          npm install --save-dev jest
          
          # ✅ Run tests and capture both stdout and stderr
          npm test 2>&1 | tee test-results.log

          # ✅ Extract only failing tests
          grep -A 10 -E "✕|FAIL" test-results.log > failed-tests.log || echo "No failed tests" > failed-tests.log

          # ✅ Ensure the directory exists before writing the file
          mkdir -p .github/ISSUE_TEMPLATE
          
          # ✅ Fetch last commit authors (max 3 unique)
          authors=$(git log -n 5 --pretty=format:'%an' | sort | uniq | head -3 | sed 's/^/  - /')

          # ✅ Write issue content with proper formatting
          echo "---" > .github/ISSUE_TEMPLATE/nightly-report.md
          echo "title: \"Nightly Test Failures\"" >> .github/ISSUE_TEMPLATE/nightly-report.md
          echo "labels: [\"bug\", \"automated\"]" >> .github/ISSUE_TEMPLATE/nightly-report.md
          echo "assignees:" >> .github/ISSUE_TEMPLATE/nightly-report.md
          echo "$authors" >> .github/ISSUE_TEMPLATE/nightly-report.md  # Auto-assign last commit authors
          echo "---" >> .github/ISSUE_TEMPLATE/nightly-report.md
          echo "" >> .github/ISSUE_TEMPLATE/nightly-report.md
          echo "## Nightly Test Failures" >> .github/ISSUE_TEMPLATE/nightly-report.md
          echo "" >> .github/ISSUE_TEMPLATE/nightly-report.md
          echo '```' >> .github/ISSUE_TEMPLATE/nightly-report.md
          cat failed-tests.log >> .github/ISSUE_TEMPLATE/nightly-report.md
          echo '```' >> .github/ISSUE_TEMPLATE/nightly-report.md


      - name: Check for Failed Tests
        id: check_failed_tests
        run: |
          if grep -E "✕|FAIL" failed-tests.log; then
            echo "TESTS_FAILED=true" >> $GITHUB_ENV
            echo "❌ Tests failed! Will create an issue."
          else
            echo "TESTS_FAILED=false" >> $GITHUB_ENV
            echo "✅ No test failures detected."
          fi

      - name: Debug - Print Failed Tests Log
        run: cat failed-tests.log

      - name: Create GitHub Issue (Only If Tests Failed)
        if: env.TESTS_FAILED == 'true'  # ✅ Creates an issue only if tests failed
        uses: JasonEtco/create-an-issue@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          filename: .github/ISSUE_TEMPLATE/nightly-report.md

      - name: Set Slack Message
        run: |
          # ✅ Read and escape test failure logs for JSON safety
          FAILED_TESTS=$(jq -Rs . < failed-tests.log)
          echo "FAILED_TESTS=$FAILED_TESTS" >> $GITHUB_ENV

          # ✅ Get last commit authors (max 3 unique GitHub usernames)
          AUTHORS=$(git log -n 5 --pretty=format:'%an' | sort | uniq | head -3)
          
          # ✅ Extract GitHub usernames for mentions (assuming GitHub usernames match Slack usernames)
          MENTIONS=""
          for author in $AUTHORS; do
            MENTIONS+="<@$author> "
          done
          
          # ✅ Save mentions as an env variable
          echo "MENTIONS=$MENTIONS" >> $GITHUB_ENV

      - name: Prepare Slack Payload
        run: |
          # 1) Read failed-tests.log into a variable
          LOG_CONTENT="$(cat failed-tests.log)"
      
          # 2) Escape it safely as a JSON string using jq
          #    -R  = read raw text
          #    -s  = read in one single string
          #    (this produces a properly quoted JSON string, e.g. "FAIL test...\n")
          ESCAPED_LOG=$(printf %s "$LOG_CONTENT" | jq -R -s '.')
      
          # 3) Build valid JSON for Slack in a file.
          #    Notice the "text" field: we just use the JSON string in $ESCAPED_LOG.
          #    - We remove extra quotes around it by placing it directly (no quotes).
          cat <<EOF > slack-payload.json
          {
            "channel": "#github-notifications",
            "username": "GitHub Actions",
            "icon_emoji": ":warning:",
            "text": "🚨 *Test Failures Detected!* 🚨\n\n🔴 Repository: $GITHUB_REPOSITORY\n🔗 Run: <${GITHUB_SERVER_URL}/${GITHUB_REPOSITORY}/actions/runs/${GITHUB_RUN_ID}>\n📜 Failed Tests:\n\`\`\`json\n${LOG_CONTENT}\n\`\`\`"
          }
          EOF
      
          # Double-check it's valid JSON (optional)
          jq . slack-payload.json
      
          # 4) Store the file’s contents (the valid JSON object) in an environment variable
          #    BUT do *not* quote it again—just compress it into one line with jq -c
          echo "SLACK_PAYLOAD=$(jq -c . slack-payload.json)" >> $GITHUB_ENV
      
      - name: Send Slack Notification on Failure
        if: env.TESTS_FAILED == 'true'
        uses: slackapi/slack-github-action@v1.25.0
        with:
          # This means "take the SLACK_PAYLOAD variable (a JSON string) and parse it into an object."
          payload: ${{ fromJson(env.SLACK_PAYLOAD) }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
